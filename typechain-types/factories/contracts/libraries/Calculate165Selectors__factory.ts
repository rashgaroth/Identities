/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Calculate165Selectors,
  Calculate165SelectorsInterface,
} from "../../../contracts/libraries/Calculate165Selectors";

const _abi = [
  {
    inputs: [],
    name: "calculateSelectorERC725X",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50607d80601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80632d9f57cf14602d575b600080fd5b60408051632260147f60e11b815290519081900360200190f3fea264697066735822122038b310308a9bbcabc64dbdd62aa8a7452ec70e1c987536ed7dbe4f9908b7ffe264736f6c63430008090033";

type Calculate165SelectorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Calculate165SelectorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Calculate165Selectors__factory extends ContractFactory {
  constructor(...args: Calculate165SelectorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Calculate165Selectors> {
    return super.deploy(overrides || {}) as Promise<Calculate165Selectors>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Calculate165Selectors {
    return super.attach(address) as Calculate165Selectors;
  }
  override connect(signer: Signer): Calculate165Selectors__factory {
    return super.connect(signer) as Calculate165Selectors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Calculate165SelectorsInterface {
    return new utils.Interface(_abi) as Calculate165SelectorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Calculate165Selectors {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as Calculate165Selectors;
  }
}
