/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace SharedStructs {
  export type ClaimStruct = {
    identifier: PromiseOrValue<string>;
    from: PromiseOrValue<string>;
    to: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
    signature: PromiseOrValue<BytesLike>;
  };

  export type ClaimStructOutput = [string, string, string, string, string] & {
    identifier: string;
    from: string;
    to: string;
    data: string;
    signature: string;
  };
}

export interface IdentityInterface extends utils.Interface {
  functions: {
    "MAX_ADDITIONAL_OWNERS()": FunctionFragment;
    "addAdditionalOwner(address)": FunctionFragment;
    "addClaim((string,address,address,bytes,bytes))": FunctionFragment;
    "additionalOwners(address)": FunctionFragment;
    "additionalOwnersCount()": FunctionFragment;
    "claims(string)": FunctionFragment;
    "execute(uint256,address,uint256,bytes)": FunctionFragment;
    "getData(bytes32[])": FunctionFragment;
    "getData(bytes32)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOfAnyNftInContract(address)": FunctionFragment;
    "proposeAdditionalRemoval(address)": FunctionFragment;
    "removeAdditionalOwner(address)": FunctionFragment;
    "removeAdditionalOwnerAcknowledgments(address,address)": FunctionFragment;
    "removeAdditionalOwnerConfirmationCount(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setData(bytes32[],bytes[])": FunctionFragment;
    "setData(bytes32,bytes)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_ADDITIONAL_OWNERS"
      | "addAdditionalOwner"
      | "addClaim"
      | "additionalOwners"
      | "additionalOwnersCount"
      | "claims"
      | "execute"
      | "getData(bytes32[])"
      | "getData(bytes32)"
      | "onERC721Received"
      | "owner"
      | "ownerOfAnyNftInContract"
      | "proposeAdditionalRemoval"
      | "removeAdditionalOwner"
      | "removeAdditionalOwnerAcknowledgments"
      | "removeAdditionalOwnerConfirmationCount"
      | "renounceOwnership"
      | "setData(bytes32[],bytes[])"
      | "setData(bytes32,bytes)"
      | "supportsInterface"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_ADDITIONAL_OWNERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAdditionalOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addClaim",
    values: [SharedStructs.ClaimStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "additionalOwners",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "additionalOwnersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claims",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getData(bytes32[])",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getData(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOfAnyNftInContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeAdditionalRemoval",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdditionalOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdditionalOwnerAcknowledgments",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdditionalOwnerConfirmationCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setData(bytes32[],bytes[])",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setData(bytes32,bytes)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_ADDITIONAL_OWNERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAdditionalOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "additionalOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "additionalOwnersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claims", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getData(bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getData(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerOfAnyNftInContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeAdditionalRemoval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdditionalOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdditionalOwnerAcknowledgments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdditionalOwnerConfirmationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setData(bytes32[],bytes[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setData(bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ContractCreated(uint256,address,uint256)": EventFragment;
    "DataChanged(bytes32)": EventFragment;
    "Executed(uint256,address,uint256,bytes4)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DataChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Executed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface ContractCreatedEventObject {
  operation: BigNumber;
  contractAddress: string;
  value: BigNumber;
}
export type ContractCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  ContractCreatedEventObject
>;

export type ContractCreatedEventFilter = TypedEventFilter<ContractCreatedEvent>;

export interface DataChangedEventObject {
  dataKey: string;
}
export type DataChangedEvent = TypedEvent<[string], DataChangedEventObject>;

export type DataChangedEventFilter = TypedEventFilter<DataChangedEvent>;

export interface ExecutedEventObject {
  operation: BigNumber;
  to: string;
  value: BigNumber;
  selector: string;
}
export type ExecutedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  ExecutedEventObject
>;

export type ExecutedEventFilter = TypedEventFilter<ExecutedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Identity extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IdentityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_ADDITIONAL_OWNERS(overrides?: CallOverrides): Promise<[number]>;

    addAdditionalOwner(
      _newAdditionalOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addClaim(
      claim: SharedStructs.ClaimStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    additionalOwners(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    additionalOwnersCount(overrides?: CallOverrides): Promise<[number]>;

    claims(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string] & {
        identifier: string;
        from: string;
        to: string;
        data: string;
        signature: string;
      }
    >;

    execute(
      operation: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "getData(bytes32[])"(
      dataKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { dataValues: string[] }>;

    "getData(bytes32)"(
      dataKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { dataValue: string }>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOfAnyNftInContract(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    proposeAdditionalRemoval(
      _additionalOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeAdditionalOwner(
      _additionalOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeAdditionalOwnerAcknowledgments(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeAdditionalOwnerConfirmationCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setData(bytes32[],bytes[])"(
      dataKeys: PromiseOrValue<BytesLike>[],
      dataValues: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setData(bytes32,bytes)"(
      dataKey: PromiseOrValue<BytesLike>,
      dataValue: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_ADDITIONAL_OWNERS(overrides?: CallOverrides): Promise<number>;

  addAdditionalOwner(
    _newAdditionalOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addClaim(
    claim: SharedStructs.ClaimStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  additionalOwners(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  additionalOwnersCount(overrides?: CallOverrides): Promise<number>;

  claims(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string] & {
      identifier: string;
      from: string;
      to: string;
      data: string;
      signature: string;
    }
  >;

  execute(
    operation: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "getData(bytes32[])"(
    dataKeys: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getData(bytes32)"(
    dataKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  onERC721Received(
    operator: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOfAnyNftInContract(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  proposeAdditionalRemoval(
    _additionalOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeAdditionalOwner(
    _additionalOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeAdditionalOwnerAcknowledgments(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeAdditionalOwnerConfirmationCount(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setData(bytes32[],bytes[])"(
    dataKeys: PromiseOrValue<BytesLike>[],
    dataValues: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setData(bytes32,bytes)"(
    dataKey: PromiseOrValue<BytesLike>,
    dataValue: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_ADDITIONAL_OWNERS(overrides?: CallOverrides): Promise<number>;

    addAdditionalOwner(
      _newAdditionalOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addClaim(
      claim: SharedStructs.ClaimStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    additionalOwners(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    additionalOwnersCount(overrides?: CallOverrides): Promise<number>;

    claims(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string] & {
        identifier: string;
        from: string;
        to: string;
        data: string;
        signature: string;
      }
    >;

    execute(
      operation: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getData(bytes32[])"(
      dataKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getData(bytes32)"(
      dataKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOfAnyNftInContract(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    proposeAdditionalRemoval(
      _additionalOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAdditionalOwner(
      _additionalOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAdditionalOwnerAcknowledgments(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeAdditionalOwnerConfirmationCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "setData(bytes32[],bytes[])"(
      dataKeys: PromiseOrValue<BytesLike>[],
      dataValues: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setData(bytes32,bytes)"(
      dataKey: PromiseOrValue<BytesLike>,
      dataValue: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ContractCreated(uint256,address,uint256)"(
      operation?: PromiseOrValue<BigNumberish> | null,
      contractAddress?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null
    ): ContractCreatedEventFilter;
    ContractCreated(
      operation?: PromiseOrValue<BigNumberish> | null,
      contractAddress?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null
    ): ContractCreatedEventFilter;

    "DataChanged(bytes32)"(
      dataKey?: PromiseOrValue<BytesLike> | null
    ): DataChangedEventFilter;
    DataChanged(
      dataKey?: PromiseOrValue<BytesLike> | null
    ): DataChangedEventFilter;

    "Executed(uint256,address,uint256,bytes4)"(
      operation?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null,
      selector?: null
    ): ExecutedEventFilter;
    Executed(
      operation?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null,
      selector?: null
    ): ExecutedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    MAX_ADDITIONAL_OWNERS(overrides?: CallOverrides): Promise<BigNumber>;

    addAdditionalOwner(
      _newAdditionalOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addClaim(
      claim: SharedStructs.ClaimStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    additionalOwners(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    additionalOwnersCount(overrides?: CallOverrides): Promise<BigNumber>;

    claims(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execute(
      operation: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "getData(bytes32[])"(
      dataKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getData(bytes32)"(
      dataKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOfAnyNftInContract(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposeAdditionalRemoval(
      _additionalOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeAdditionalOwner(
      _additionalOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeAdditionalOwnerAcknowledgments(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeAdditionalOwnerConfirmationCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setData(bytes32[],bytes[])"(
      dataKeys: PromiseOrValue<BytesLike>[],
      dataValues: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setData(bytes32,bytes)"(
      dataKey: PromiseOrValue<BytesLike>,
      dataValue: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_ADDITIONAL_OWNERS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAdditionalOwner(
      _newAdditionalOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addClaim(
      claim: SharedStructs.ClaimStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    additionalOwners(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    additionalOwnersCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claims(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execute(
      operation: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "getData(bytes32[])"(
      dataKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getData(bytes32)"(
      dataKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOfAnyNftInContract(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposeAdditionalRemoval(
      _additionalOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeAdditionalOwner(
      _additionalOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeAdditionalOwnerAcknowledgments(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAdditionalOwnerConfirmationCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setData(bytes32[],bytes[])"(
      dataKeys: PromiseOrValue<BytesLike>[],
      dataValues: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setData(bytes32,bytes)"(
      dataKey: PromiseOrValue<BytesLike>,
      dataValue: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
